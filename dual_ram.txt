module dual_ram(clk,pci_clk,rnw,be,ra,wa,di,din_valid,do);
input clk ; 
 input pci_clk ; 

 input rnw ; // Sets one RAM in write only mode 
 input din_valid ; // Data in (di) valid. 
 input [7:0] be ; // Byte enable. 
 input [2:0] ra, wa ; // Read/write address. 
 input [63:0] di ; // Data input and 
 output [63:0] do ; // Data output of dual RAM. 
 wire switch_bank; // Declare net outputs. 
 wire [63:0] do1 ; 
 wire [63:0] do2 ; 
 wire [63:0] do_next ; 
reg [63:0] do; // Declare registered outputs. 
reg rnw_delay ; 
assign switch_bank = ~rnw; // Configure ram1/ram2 for read and write 
ram_rc_ram1 R1 ( .clk(clk), 

.pci_clk(pci_clk), 
 .rnw(rnw), 
 .be(be), 
 .ra(ra), 
 .wa(wa), 
 .di(di), 
 .din_valid(din_valid), 
 .do(do1)  ) ;
 ram_rc_ram1 R2( .clk(clk),  
 .pci_clk(pci_clk), 
 .rnw(switch_bank), // If rnw =1, ram2 is configured for 
.be(be), // read mode. Otherwise, write mode. 
 .ra(ra), 
 .wa(wa), 
 .di(di), 
 .din_valid(din_valid), 
 .do(do2) 
 ) ; 
 assign do_next = (rnw_delay) ? do2 : do1 ; // Read ram2 or ram1. 
 always @ (posedge clk) 
begin 
rnw_delay <= rnw ; // Delay the rnw signal by one clock. 
 do <= do_next ; // Register the selected RAM output. 
end 
endmodule 





module ram_rc_ram1(clk,pci_clk, rnw, be, ra, wa, di,  din_valid, do  );
input clk ; // Declare I/Os. 
 input pci_clk ; 
 input rnw ; 
 input din_valid ; 
 input [7:0] be ; 
 input [2:0] ra ; 
 input [2:0] wa ; 
 input [63:0] di ; 
 output [63:0] do ;
 reg [63:0] do ; // Declare registered outputs. 
 wire [63:0] mem_data ; // Declare all wire signals. 
 wire [63:0] do_next ; 
 wire [2:0] addr ; 
 wire [63:0] loc0 ; 
 wire [63:0] loc1 ; 
 wire [63:0] loc2 ; 
 wire [63:0] loc3 ; 
 wire [63:0] loc4 ; 
 wire [63:0] loc5 ; 
 wire [63:0] loc6 ; 
 wire [63:0] loc7 ; 
 wire be0 ; 
 wire be1 ; 
 wire be2 ; 
 wire be3 ; 
 wire be4 ; 
 wire be5 ; 
 wire be6 ; 
 wire be7 ; 
 reg [63:0] column ; 
 reg [63:0] mem [7:0] ;// Declare register array, 8Ã—64 bits.
 assign addr = (rnw) ? wa : ra ; // Get write address (rnw = 1) or read address. 
assign mem_data = mem [addr] ; // Fetch the memory content.
assign loc0 = mem [0] ; // Intermediate store for memory. 
 assign loc1 = mem [1] ; 
 assign loc2 = mem [2] ; 
 assign loc3 = mem [3] ; 
 assign loc4 = mem [4] ; 
 assign loc5 = mem [5] ; 
 assign loc6 = mem [6] ; 
 assign loc7 = mem [7] ;
 always @ (addr or loc0 or loc1 or loc2 or loc3 or loc4 or loc5 or loc6 or loc7) 
begin 
case (addr) // Read the RAM column-wise. 
3'b000: 
column = {loc0[63:56], loc1[63:56], loc2[63:56], loc3[63:56], loc4[63:56], 
 loc5[63:56], loc6[63:56], loc7[63:56]} ; 
3'b001: 
column = {loc0[55:48], loc1[55:48], loc2[55:48], loc3[55:48], loc4[55:48], 
 loc5[55:48], loc6[55:48], loc7[55:48]} ; 
3'b010: 
column = {loc0[47:40], loc1[47:40], loc2[47:40], loc3[47:40], loc4[47:40], 
 loc5[47:40], loc6[47:40], loc7[47:40]} ; 
3'b011: 
column = {loc0[39:32], loc1[39:32], loc2[39:32], loc3[39:32], loc4[39:32], 
 loc5[39:32], loc6[39:32], loc7[39:32]} ; 
3'b100: 
column = {loc0[31:24], loc1[31:24], loc2[31:24], loc3[31:24], loc4[31:24], 
 loc5[31:24], loc6[31:24], loc7[31:24]} ; 
3'b101: 
column = {loc0[23:16], loc1[23:16], loc2[23:16], loc3[23:16], loc4[23:16], 
 loc5[23:16], loc6[23:16], loc7[23:16]} ; 
3'b110: 
column = {loc0[15:8], loc1[15:8], loc2[15:8], loc3[15:8], loc4[15:8], 
 loc5[15:8], loc6[15:8], loc7[15:8]} ; 
3'b111: 
column = {loc0[7:0], loc1[7:0], loc2[7:0], loc3[7:0], loc4[7:0], loc5[7:0], 
 loc6[7:0], loc7[7:0]} ; 
default : 
column = {loc0[7:0], loc1[7:0], loc2[7:0], loc3[7:0], loc4[7:0], loc5[7:0], 
 loc6[7:0], loc7[7:0]} ; 
endcase 
end 
assign be7 = (!be[7]) & rnw & din_valid ; 
// Enable write only if be7 = 1, and so on. 
assign be6 = (!be[6]) & rnw & din_valid ; 
assign be5 = (!be[5]) & rnw & din_valid ;
assign be4 = (!be[4]) & rnw & din_valid ; 
assign be3 = (!be[3]) & rnw & din_valid ; 
assign be2 = (!be[2]) & rnw & din_valid ; 
assign be1 = (!be[1]) & rnw & din_valid ; 
assign be0 = (!be[0]) & rnw & din_valid ; 
always @ (posedge pci_clk) 
begin // Write into RAM only if be7 = 1, and so on. 
 // Otherwise, don't disturb the RAM contents. 
 mem [addr] <= { ( (be7) ? di[63:56] : mem_data[63:56] ), 
 ( (be6) ? di[55:48] : mem_data[55:48] ), 
 ( (be5) ? di[47:40] : mem_data[47:40] ), 
 ( (be4) ? di[39:32] : mem_data[39:32] ), 
 ( (be3) ? di[31:24] : mem_data[31:24] ), 
 ( (be2) ? di[23:16] : mem_data[23:16] ), 
 ( (be1) ? di[15:8] : mem_data[15:8] ), 
 ( (be0) ? di[7:0] : mem_data[7:0] ) 
 } ; 
end 
assign do_next = (rnw) ? do : column ; 
always @ (posedge clk) 
 do <= do_next ; // Register the output. 
endmodule 
