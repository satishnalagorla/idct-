`define clkperiodby2 5 // Both clocks clk & pci_clk operate at 100 MHz. 
`define pci_clkperiodby2 5

module idct_testbench;
// Declare the test bench and inputs. 
reg pci_clk ; 
reg clk ; 
reg reset_n ; 
reg start ; 
reg [63:0] di ; 
reg din_valid ; 
reg [2:0] wa ; 
reg [7:0] be ; 
reg hold ; 
wire ready ; 
wire [7:0] idct ; // IDCT output. 
wire idct_valid ; 
wire [5:0] addr ; 
wire stopproc ; 
integer fp1;
wire [10:0] eobcnt_next ; 
reg [10:0] eobcnt_reg ; 
reg start_din ; 
reg [63:0] mem [8191:0] ;  
reg [12:0] mem_addr ; // 13 bits address to accommodate 

idct_main dctq1( // Invoke IDCT design module to get the IDCT output. 
 .pci_clk(pci_clk), 
 .clk(clk), 
 .reset_n(reset_n), 
 .start(start), 
 .di(di), 
 .din_valid(din_valid), 
 .wa(wa), 
 .be(be), 
 .hold(hold), 
 .ready(ready), 
 .idct(idct), 
 .idct_valid(idct_valid), 
 .addr(addr) 
 ) ; 
initial 
begin 
 $readmemh ("mem.mem", mem) ; 
// "mem" receives the input inverse quantized image  frame, in memory file. 
 // Change the name for a different image frame. 
 fp1 = $fopen ("idct.mem") ;  // for storing idct values
 pci_clk = 0 ; 
 clk = 0 ; 
 reset_n = 1 ; 
 start = 0 ; 
 di = 0 ; 
 din_valid = 0 ; 
 wa = 0 ; 
 be = 8'h00 ; // Enable bytes to be written. 
 hold = 0 ; 
 mem_addr = 0 ; 
 start_din = 1'b0 ; 
 #20 reset_n = 1'b0 ; 
 #40 reset_n = 1'b1 ; 
 start_din = 1'b1; 
 #700000 // Run long enough to process the entire frame. 
 $fclose(fp1) ; // Close the output file and 
 $stop ; // stop the simulation. 
end 
always 
 #`clkperiodby2 clk <= ~clk ; // Run the two clocks. 
always 
 #`pci_clkperiodby2 pci_clk <= ~pci_clk ; 
always @ (start_din or clk or pci_clk or reset_n or wa or mem_addr) 
begin 
if (start_din == 1'b1) 
 begin 
 @(posedge pci_clk) 
//if(i != 0) // Image block counter. 
 begin 
@(posedge pci_clk) ; 
#1 ; 
din_valid = 1 ; 
 wa = 0 ; 
 di = mem[mem_addr] ; // Inputs first row of an 
 // image block. 
 mem_addr = mem_addr + 1 ; 
 end 
 repeat(7) 
 begin 
 @(posedge pci_clk) ; 
 #1 ; 
 din_valid = 1 ; 
 wa = wa + 1 ; 
 di = mem[mem_addr] ; // Inputs second to eight rows 
 // of the image block. 
 mem_addr = mem_addr + 1 ; 
 end 
 @(posedge pci_clk) ; 
 #1 ; 
 din_valid = 0 ; 
 wait (ready) ; // Wait for ready to go high. 
 @(posedge clk) ; 
 #1 start = 1'b1 ;  
 end 
 else 
 begin 
 
 $fclose(fp1) ;  
 end 
end  
always @ (posedge clk) 
begin 
 if(idct_valid == 1'b1) 
 begin 
 if (stopproc == 1'b0) // Means, the process has not stopped. 
$fdisplay(fp1,"%h", idct) ; 
 end 
end 
endmodule 
